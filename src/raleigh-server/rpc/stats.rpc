request rusage {}
response rusage {
   1: uint64 utime;         /* user CPU time used */
   2: uint64 stime;         /* system CPU time used */
   3: uint64 maxrss;        /* maximum resident set size */
   4: uint64 minflt;        /* page reclaims (soft page faults) */
   5: uint64 majflt;        /* page faults (hard page faults) */
   6: uint64 inblock;       /* block input operations */
   7: uint64 oublock;       /* block output operations */
   8: uint64 nvcsw;         /* voluntary context switches */
   9: uint64 nivcsw;        /* involuntary context switches */

  10: uint64 iowait;
  11: uint64 ioread;
  12: uint64 iowrite;
}

struct rpc_histogram {
  0: uint64 nevents;
  1: uint64 min;
  2: uint64 max;
  3: uint64 sum;
  4: uint16 nbuckets;
  5: list[uint64] bounds;
  6: list[uint64] events;
};

request memusage {}
response memusage {
  0: uint32 arena;        /* Non-mmapped space allocated (bytes) */
  1: uint32 ordblks;      /* Number of free chunks */
  2: uint32 smblks;       /* Number of free fastbin blocks */
  3: uint32 hblks;        /* Number of mmapped regions */
  4: uint32 hblkhd;       /* Space allocated in mmapped regions (bytes) */
  5: uint32 usmblks;      /* Maximum total allocated space (bytes) */
  6: uint32 fsmblks;      /* Space in freed fastbin blocks (bytes) */
  7: uint32 uordblks;     /* Total allocated space (bytes) */
  8: uint32 fordblks;     /* Total free space (bytes) */
  9: uint32 keepcost;     /* Top-most, releasable space (bytes) */
 10: uint64 sysused;
 11: uint64 sysfree;
}

request iopoll {}
response iopoll {
  0: list[uint64] waits;
  1: list[uint64] reads;
  2: list[uint64] writes;
}

rpc stats_rpc {
  0: rusage;
  1: memusage;
  2: iopoll;
}