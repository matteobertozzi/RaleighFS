
/* File autogenerated, do not edit */
#ifndef _RPC_H_
#define _RPC_H_

#include <zcl/bytesref.h>
#include <zcl/macros.h>
#include <zcl/coding.h>
#include <zcl/reader.h>
#include <zcl/writer.h>
#include <zcl/array.h>
#include <zcl/buffer.h>
#include <zcl/bitmap.h>
#include <zcl/debug.h>


struct status {
  /* Internal states */
  uint8_t status_fields_bitmap[1];
  int status_ialloc;

  /* Fields */
  uint64_t   code;                        /*  1: uint64 0 */
  z_bytes_ref_t message;                     /*  2: bytes  */
};

#define status_has_code(msg)  z_bitmap_test((msg)->status_fields_bitmap, 0)
#define status_set_code(msg)  z_bitmap_set((msg)->status_fields_bitmap, 0)
#define status_has_message(msg)  z_bitmap_test((msg)->status_fields_bitmap, 1)
#define status_set_message(msg)  z_bitmap_set((msg)->status_fields_bitmap, 1)

struct status *status_alloc (struct status *msg);
void   status_free (struct status *msg);
int    status_parse (struct status *msg, void *reader, uint64_t size);
size_t status_size  (struct status *msg);
int    status_write (struct status *msg, z_buffer_t *buffer);
void   status_dump  (FILE *stream, const struct status *msg);

struct semantic_open_request {
  /* Internal states */
  uint8_t semantic_open_request_fields_bitmap[1];
  int semantic_open_request_ialloc;

  /* Fields */
  z_bytes_ref_t name;                        /*  1: bytes  */
};

#define semantic_open_request_has_name(msg)  z_bitmap_test((msg)->semantic_open_request_fields_bitmap, 0)
#define semantic_open_request_set_name(msg)  z_bitmap_set((msg)->semantic_open_request_fields_bitmap, 0)

struct semantic_open_request *semantic_open_request_alloc (struct semantic_open_request *msg);
void   semantic_open_request_free (struct semantic_open_request *msg);
int    semantic_open_request_parse (struct semantic_open_request *msg, void *reader, uint64_t size);
size_t semantic_open_request_size  (struct semantic_open_request *msg);
int    semantic_open_request_write (struct semantic_open_request *msg, z_buffer_t *buffer);
void   semantic_open_request_dump  (FILE *stream, const struct semantic_open_request *msg);

struct semantic_open_response {
  /* Internal states */
  uint8_t semantic_open_response_fields_bitmap[1];
  int semantic_open_response_ialloc;

  /* Fields */
  struct status status;                      /*  0: status  */
  uint64_t   oid;                         /*  1: uint64  */
};

#define semantic_open_response_has_status(msg)  z_bitmap_test((msg)->semantic_open_response_fields_bitmap, 0)
#define semantic_open_response_set_status(msg)  z_bitmap_set((msg)->semantic_open_response_fields_bitmap, 0)
#define semantic_open_response_has_oid(msg)  z_bitmap_test((msg)->semantic_open_response_fields_bitmap, 1)
#define semantic_open_response_set_oid(msg)  z_bitmap_set((msg)->semantic_open_response_fields_bitmap, 1)

struct semantic_open_response *semantic_open_response_alloc (struct semantic_open_response *msg);
void   semantic_open_response_free (struct semantic_open_response *msg);
int    semantic_open_response_parse (struct semantic_open_response *msg, void *reader, uint64_t size);
size_t semantic_open_response_size  (struct semantic_open_response *msg);
int    semantic_open_response_write (struct semantic_open_response *msg, z_buffer_t *buffer);
void   semantic_open_response_dump  (FILE *stream, const struct semantic_open_response *msg);

struct semantic_create_request {
  /* Internal states */
  uint8_t semantic_create_request_fields_bitmap[1];
  int semantic_create_request_ialloc;

  /* Fields */
  z_bytes_ref_t name;                        /*  1: bytes  */
  z_bytes_ref_t type;                        /*  2: bytes  */
};

#define semantic_create_request_has_name(msg)  z_bitmap_test((msg)->semantic_create_request_fields_bitmap, 0)
#define semantic_create_request_set_name(msg)  z_bitmap_set((msg)->semantic_create_request_fields_bitmap, 0)
#define semantic_create_request_has_type(msg)  z_bitmap_test((msg)->semantic_create_request_fields_bitmap, 1)
#define semantic_create_request_set_type(msg)  z_bitmap_set((msg)->semantic_create_request_fields_bitmap, 1)

struct semantic_create_request *semantic_create_request_alloc (struct semantic_create_request *msg);
void   semantic_create_request_free (struct semantic_create_request *msg);
int    semantic_create_request_parse (struct semantic_create_request *msg, void *reader, uint64_t size);
size_t semantic_create_request_size  (struct semantic_create_request *msg);
int    semantic_create_request_write (struct semantic_create_request *msg, z_buffer_t *buffer);
void   semantic_create_request_dump  (FILE *stream, const struct semantic_create_request *msg);

struct semantic_create_response {
  /* Internal states */
  uint8_t semantic_create_response_fields_bitmap[1];
  int semantic_create_response_ialloc;

  /* Fields */
  struct status status;                      /*  0: status  */
  uint64_t   oid;                         /*  1: uint64  */
};

#define semantic_create_response_has_status(msg)  z_bitmap_test((msg)->semantic_create_response_fields_bitmap, 0)
#define semantic_create_response_set_status(msg)  z_bitmap_set((msg)->semantic_create_response_fields_bitmap, 0)
#define semantic_create_response_has_oid(msg)  z_bitmap_test((msg)->semantic_create_response_fields_bitmap, 1)
#define semantic_create_response_set_oid(msg)  z_bitmap_set((msg)->semantic_create_response_fields_bitmap, 1)

struct semantic_create_response *semantic_create_response_alloc (struct semantic_create_response *msg);
void   semantic_create_response_free (struct semantic_create_response *msg);
int    semantic_create_response_parse (struct semantic_create_response *msg, void *reader, uint64_t size);
size_t semantic_create_response_size  (struct semantic_create_response *msg);
int    semantic_create_response_write (struct semantic_create_response *msg, z_buffer_t *buffer);
void   semantic_create_response_dump  (FILE *stream, const struct semantic_create_response *msg);

struct semantic_delete_request {
  /* Internal states */
  uint8_t semantic_delete_request_fields_bitmap[1];
  int semantic_delete_request_ialloc;

  /* Fields */
  z_bytes_ref_t name;                        /*  1: bytes  */
};

#define semantic_delete_request_has_name(msg)  z_bitmap_test((msg)->semantic_delete_request_fields_bitmap, 0)
#define semantic_delete_request_set_name(msg)  z_bitmap_set((msg)->semantic_delete_request_fields_bitmap, 0)

struct semantic_delete_request *semantic_delete_request_alloc (struct semantic_delete_request *msg);
void   semantic_delete_request_free (struct semantic_delete_request *msg);
int    semantic_delete_request_parse (struct semantic_delete_request *msg, void *reader, uint64_t size);
size_t semantic_delete_request_size  (struct semantic_delete_request *msg);
int    semantic_delete_request_write (struct semantic_delete_request *msg, z_buffer_t *buffer);
void   semantic_delete_request_dump  (FILE *stream, const struct semantic_delete_request *msg);

struct semantic_delete_response {
  /* Internal states */
  uint8_t semantic_delete_response_fields_bitmap[1];
  int semantic_delete_response_ialloc;

  /* Fields */
  struct status status;                      /*  0: status  */
};

#define semantic_delete_response_has_status(msg)  z_bitmap_test((msg)->semantic_delete_response_fields_bitmap, 0)
#define semantic_delete_response_set_status(msg)  z_bitmap_set((msg)->semantic_delete_response_fields_bitmap, 0)

struct semantic_delete_response *semantic_delete_response_alloc (struct semantic_delete_response *msg);
void   semantic_delete_response_free (struct semantic_delete_response *msg);
int    semantic_delete_response_parse (struct semantic_delete_response *msg, void *reader, uint64_t size);
size_t semantic_delete_response_size  (struct semantic_delete_response *msg);
int    semantic_delete_response_write (struct semantic_delete_response *msg, z_buffer_t *buffer);
void   semantic_delete_response_dump  (FILE *stream, const struct semantic_delete_response *msg);

struct semantic_rename_request {
  /* Internal states */
  uint8_t semantic_rename_request_fields_bitmap[1];
  int semantic_rename_request_ialloc;

  /* Fields */
  z_bytes_ref_t old_name;                    /*  1: bytes  */
  z_bytes_ref_t new_name;                    /*  2: bytes  */
};

#define semantic_rename_request_has_old_name(msg)  z_bitmap_test((msg)->semantic_rename_request_fields_bitmap, 0)
#define semantic_rename_request_set_old_name(msg)  z_bitmap_set((msg)->semantic_rename_request_fields_bitmap, 0)
#define semantic_rename_request_has_new_name(msg)  z_bitmap_test((msg)->semantic_rename_request_fields_bitmap, 1)
#define semantic_rename_request_set_new_name(msg)  z_bitmap_set((msg)->semantic_rename_request_fields_bitmap, 1)

struct semantic_rename_request *semantic_rename_request_alloc (struct semantic_rename_request *msg);
void   semantic_rename_request_free (struct semantic_rename_request *msg);
int    semantic_rename_request_parse (struct semantic_rename_request *msg, void *reader, uint64_t size);
size_t semantic_rename_request_size  (struct semantic_rename_request *msg);
int    semantic_rename_request_write (struct semantic_rename_request *msg, z_buffer_t *buffer);
void   semantic_rename_request_dump  (FILE *stream, const struct semantic_rename_request *msg);

struct semantic_rename_response {
  /* Internal states */
  uint8_t semantic_rename_response_fields_bitmap[1];
  int semantic_rename_response_ialloc;

  /* Fields */
  struct status status;                      /*  0: status  */
};

#define semantic_rename_response_has_status(msg)  z_bitmap_test((msg)->semantic_rename_response_fields_bitmap, 0)
#define semantic_rename_response_set_status(msg)  z_bitmap_set((msg)->semantic_rename_response_fields_bitmap, 0)

struct semantic_rename_response *semantic_rename_response_alloc (struct semantic_rename_response *msg);
void   semantic_rename_response_free (struct semantic_rename_response *msg);
int    semantic_rename_response_parse (struct semantic_rename_response *msg, void *reader, uint64_t size);
size_t semantic_rename_response_size  (struct semantic_rename_response *msg);
int    semantic_rename_response_write (struct semantic_rename_response *msg, z_buffer_t *buffer);
void   semantic_rename_response_dump  (FILE *stream, const struct semantic_rename_response *msg);

struct transaction_create_request {
  /* Internal states */
  uint8_t transaction_create_request_fields_bitmap[0];
  int transaction_create_request_ialloc;

  /* Fields */

};



struct transaction_create_request *transaction_create_request_alloc (struct transaction_create_request *msg);
void   transaction_create_request_free (struct transaction_create_request *msg);
int    transaction_create_request_parse (struct transaction_create_request *msg, void *reader, uint64_t size);
size_t transaction_create_request_size  (struct transaction_create_request *msg);
int    transaction_create_request_write (struct transaction_create_request *msg, z_buffer_t *buffer);
void   transaction_create_request_dump  (FILE *stream, const struct transaction_create_request *msg);

struct transaction_create_response {
  /* Internal states */
  uint8_t transaction_create_response_fields_bitmap[1];
  int transaction_create_response_ialloc;

  /* Fields */
  struct status status;                      /*  0: status  */
  uint64_t   txn_id;                      /*  1: uint64  */
};

#define transaction_create_response_has_status(msg)  z_bitmap_test((msg)->transaction_create_response_fields_bitmap, 0)
#define transaction_create_response_set_status(msg)  z_bitmap_set((msg)->transaction_create_response_fields_bitmap, 0)
#define transaction_create_response_has_txn_id(msg)  z_bitmap_test((msg)->transaction_create_response_fields_bitmap, 1)
#define transaction_create_response_set_txn_id(msg)  z_bitmap_set((msg)->transaction_create_response_fields_bitmap, 1)

struct transaction_create_response *transaction_create_response_alloc (struct transaction_create_response *msg);
void   transaction_create_response_free (struct transaction_create_response *msg);
int    transaction_create_response_parse (struct transaction_create_response *msg, void *reader, uint64_t size);
size_t transaction_create_response_size  (struct transaction_create_response *msg);
int    transaction_create_response_write (struct transaction_create_response *msg, z_buffer_t *buffer);
void   transaction_create_response_dump  (FILE *stream, const struct transaction_create_response *msg);

struct transaction_commit_request {
  /* Internal states */
  uint8_t transaction_commit_request_fields_bitmap[1];
  int transaction_commit_request_ialloc;

  /* Fields */
  uint64_t   txn_id;                      /*  1: uint64  */
};

#define transaction_commit_request_has_txn_id(msg)  z_bitmap_test((msg)->transaction_commit_request_fields_bitmap, 0)
#define transaction_commit_request_set_txn_id(msg)  z_bitmap_set((msg)->transaction_commit_request_fields_bitmap, 0)

struct transaction_commit_request *transaction_commit_request_alloc (struct transaction_commit_request *msg);
void   transaction_commit_request_free (struct transaction_commit_request *msg);
int    transaction_commit_request_parse (struct transaction_commit_request *msg, void *reader, uint64_t size);
size_t transaction_commit_request_size  (struct transaction_commit_request *msg);
int    transaction_commit_request_write (struct transaction_commit_request *msg, z_buffer_t *buffer);
void   transaction_commit_request_dump  (FILE *stream, const struct transaction_commit_request *msg);

struct transaction_commit_response {
  /* Internal states */
  uint8_t transaction_commit_response_fields_bitmap[1];
  int transaction_commit_response_ialloc;

  /* Fields */
  struct status status;                      /*  0: status  */
};

#define transaction_commit_response_has_status(msg)  z_bitmap_test((msg)->transaction_commit_response_fields_bitmap, 0)
#define transaction_commit_response_set_status(msg)  z_bitmap_set((msg)->transaction_commit_response_fields_bitmap, 0)

struct transaction_commit_response *transaction_commit_response_alloc (struct transaction_commit_response *msg);
void   transaction_commit_response_free (struct transaction_commit_response *msg);
int    transaction_commit_response_parse (struct transaction_commit_response *msg, void *reader, uint64_t size);
size_t transaction_commit_response_size  (struct transaction_commit_response *msg);
int    transaction_commit_response_write (struct transaction_commit_response *msg, z_buffer_t *buffer);
void   transaction_commit_response_dump  (FILE *stream, const struct transaction_commit_response *msg);

struct transaction_rollback_request {
  /* Internal states */
  uint8_t transaction_rollback_request_fields_bitmap[1];
  int transaction_rollback_request_ialloc;

  /* Fields */
  uint64_t   txn_id;                      /*  1: uint64  */
};

#define transaction_rollback_request_has_txn_id(msg)  z_bitmap_test((msg)->transaction_rollback_request_fields_bitmap, 0)
#define transaction_rollback_request_set_txn_id(msg)  z_bitmap_set((msg)->transaction_rollback_request_fields_bitmap, 0)

struct transaction_rollback_request *transaction_rollback_request_alloc (struct transaction_rollback_request *msg);
void   transaction_rollback_request_free (struct transaction_rollback_request *msg);
int    transaction_rollback_request_parse (struct transaction_rollback_request *msg, void *reader, uint64_t size);
size_t transaction_rollback_request_size  (struct transaction_rollback_request *msg);
int    transaction_rollback_request_write (struct transaction_rollback_request *msg, z_buffer_t *buffer);
void   transaction_rollback_request_dump  (FILE *stream, const struct transaction_rollback_request *msg);

struct transaction_rollback_response {
  /* Internal states */
  uint8_t transaction_rollback_response_fields_bitmap[1];
  int transaction_rollback_response_ialloc;

  /* Fields */
  struct status status;                      /*  0: status  */
};

#define transaction_rollback_response_has_status(msg)  z_bitmap_test((msg)->transaction_rollback_response_fields_bitmap, 0)
#define transaction_rollback_response_set_status(msg)  z_bitmap_set((msg)->transaction_rollback_response_fields_bitmap, 0)

struct transaction_rollback_response *transaction_rollback_response_alloc (struct transaction_rollback_response *msg);
void   transaction_rollback_response_free (struct transaction_rollback_response *msg);
int    transaction_rollback_response_parse (struct transaction_rollback_response *msg, void *reader, uint64_t size);
size_t transaction_rollback_response_size  (struct transaction_rollback_response *msg);
int    transaction_rollback_response_write (struct transaction_rollback_response *msg, z_buffer_t *buffer);
void   transaction_rollback_response_dump  (FILE *stream, const struct transaction_rollback_response *msg);

struct number_get_request {
  /* Internal states */
  uint8_t number_get_request_fields_bitmap[1];
  int number_get_request_ialloc;

  /* Fields */
  uint64_t   txn_id;                      /*  0: uint64 0 */
  uint64_t   oid;                         /*  1: uint64  */
};

#define number_get_request_has_txn_id(msg)  z_bitmap_test((msg)->number_get_request_fields_bitmap, 0)
#define number_get_request_set_txn_id(msg)  z_bitmap_set((msg)->number_get_request_fields_bitmap, 0)
#define number_get_request_has_oid(msg)  z_bitmap_test((msg)->number_get_request_fields_bitmap, 1)
#define number_get_request_set_oid(msg)  z_bitmap_set((msg)->number_get_request_fields_bitmap, 1)

struct number_get_request *number_get_request_alloc (struct number_get_request *msg);
void   number_get_request_free (struct number_get_request *msg);
int    number_get_request_parse (struct number_get_request *msg, void *reader, uint64_t size);
size_t number_get_request_size  (struct number_get_request *msg);
int    number_get_request_write (struct number_get_request *msg, z_buffer_t *buffer);
void   number_get_request_dump  (FILE *stream, const struct number_get_request *msg);

struct number_get_response {
  /* Internal states */
  uint8_t number_get_response_fields_bitmap[1];
  int number_get_response_ialloc;

  /* Fields */
  struct status status;                      /*  0: status  */
  int64_t    value;                       /*  1: int64  */
};

#define number_get_response_has_status(msg)  z_bitmap_test((msg)->number_get_response_fields_bitmap, 0)
#define number_get_response_set_status(msg)  z_bitmap_set((msg)->number_get_response_fields_bitmap, 0)
#define number_get_response_has_value(msg)  z_bitmap_test((msg)->number_get_response_fields_bitmap, 1)
#define number_get_response_set_value(msg)  z_bitmap_set((msg)->number_get_response_fields_bitmap, 1)

struct number_get_response *number_get_response_alloc (struct number_get_response *msg);
void   number_get_response_free (struct number_get_response *msg);
int    number_get_response_parse (struct number_get_response *msg, void *reader, uint64_t size);
size_t number_get_response_size  (struct number_get_response *msg);
int    number_get_response_write (struct number_get_response *msg, z_buffer_t *buffer);
void   number_get_response_dump  (FILE *stream, const struct number_get_response *msg);

struct number_set_request {
  /* Internal states */
  uint8_t number_set_request_fields_bitmap[1];
  int number_set_request_ialloc;

  /* Fields */
  uint64_t   txn_id;                      /*  0: uint64 0 */
  uint64_t   oid;                         /*  1: uint64  */
  int64_t    value;                       /*  2: int64  */
};

#define number_set_request_has_txn_id(msg)  z_bitmap_test((msg)->number_set_request_fields_bitmap, 0)
#define number_set_request_set_txn_id(msg)  z_bitmap_set((msg)->number_set_request_fields_bitmap, 0)
#define number_set_request_has_oid(msg)  z_bitmap_test((msg)->number_set_request_fields_bitmap, 1)
#define number_set_request_set_oid(msg)  z_bitmap_set((msg)->number_set_request_fields_bitmap, 1)
#define number_set_request_has_value(msg)  z_bitmap_test((msg)->number_set_request_fields_bitmap, 2)
#define number_set_request_set_value(msg)  z_bitmap_set((msg)->number_set_request_fields_bitmap, 2)

struct number_set_request *number_set_request_alloc (struct number_set_request *msg);
void   number_set_request_free (struct number_set_request *msg);
int    number_set_request_parse (struct number_set_request *msg, void *reader, uint64_t size);
size_t number_set_request_size  (struct number_set_request *msg);
int    number_set_request_write (struct number_set_request *msg, z_buffer_t *buffer);
void   number_set_request_dump  (FILE *stream, const struct number_set_request *msg);

struct number_set_response {
  /* Internal states */
  uint8_t number_set_response_fields_bitmap[1];
  int number_set_response_ialloc;

  /* Fields */
  struct status status;                      /*  0: status  */
};

#define number_set_response_has_status(msg)  z_bitmap_test((msg)->number_set_response_fields_bitmap, 0)
#define number_set_response_set_status(msg)  z_bitmap_set((msg)->number_set_response_fields_bitmap, 0)

struct number_set_response *number_set_response_alloc (struct number_set_response *msg);
void   number_set_response_free (struct number_set_response *msg);
int    number_set_response_parse (struct number_set_response *msg, void *reader, uint64_t size);
size_t number_set_response_size  (struct number_set_response *msg);
int    number_set_response_write (struct number_set_response *msg, z_buffer_t *buffer);
void   number_set_response_dump  (FILE *stream, const struct number_set_response *msg);

struct number_cas_request {
  /* Internal states */
  uint8_t number_cas_request_fields_bitmap[1];
  int number_cas_request_ialloc;

  /* Fields */
  uint64_t   txn_id;                      /*  0: uint64 0 */
  uint64_t   oid;                         /*  1: uint64  */
  int64_t    old_value;                   /*  2: int64  */
  int64_t    new_value;                   /*  3: int64  */
};

#define number_cas_request_has_txn_id(msg)  z_bitmap_test((msg)->number_cas_request_fields_bitmap, 0)
#define number_cas_request_set_txn_id(msg)  z_bitmap_set((msg)->number_cas_request_fields_bitmap, 0)
#define number_cas_request_has_oid(msg)  z_bitmap_test((msg)->number_cas_request_fields_bitmap, 1)
#define number_cas_request_set_oid(msg)  z_bitmap_set((msg)->number_cas_request_fields_bitmap, 1)
#define number_cas_request_has_old_value(msg)  z_bitmap_test((msg)->number_cas_request_fields_bitmap, 2)
#define number_cas_request_set_old_value(msg)  z_bitmap_set((msg)->number_cas_request_fields_bitmap, 2)
#define number_cas_request_has_new_value(msg)  z_bitmap_test((msg)->number_cas_request_fields_bitmap, 3)
#define number_cas_request_set_new_value(msg)  z_bitmap_set((msg)->number_cas_request_fields_bitmap, 3)

struct number_cas_request *number_cas_request_alloc (struct number_cas_request *msg);
void   number_cas_request_free (struct number_cas_request *msg);
int    number_cas_request_parse (struct number_cas_request *msg, void *reader, uint64_t size);
size_t number_cas_request_size  (struct number_cas_request *msg);
int    number_cas_request_write (struct number_cas_request *msg, z_buffer_t *buffer);
void   number_cas_request_dump  (FILE *stream, const struct number_cas_request *msg);

struct number_cas_response {
  /* Internal states */
  uint8_t number_cas_response_fields_bitmap[1];
  int number_cas_response_ialloc;

  /* Fields */
  struct status status;                      /*  0: status  */
  int64_t    value;                       /*  1: int64  */
};

#define number_cas_response_has_status(msg)  z_bitmap_test((msg)->number_cas_response_fields_bitmap, 0)
#define number_cas_response_set_status(msg)  z_bitmap_set((msg)->number_cas_response_fields_bitmap, 0)
#define number_cas_response_has_value(msg)  z_bitmap_test((msg)->number_cas_response_fields_bitmap, 1)
#define number_cas_response_set_value(msg)  z_bitmap_set((msg)->number_cas_response_fields_bitmap, 1)

struct number_cas_response *number_cas_response_alloc (struct number_cas_response *msg);
void   number_cas_response_free (struct number_cas_response *msg);
int    number_cas_response_parse (struct number_cas_response *msg, void *reader, uint64_t size);
size_t number_cas_response_size  (struct number_cas_response *msg);
int    number_cas_response_write (struct number_cas_response *msg, z_buffer_t *buffer);
void   number_cas_response_dump  (FILE *stream, const struct number_cas_response *msg);

struct number_add_request {
  /* Internal states */
  uint8_t number_add_request_fields_bitmap[1];
  int number_add_request_ialloc;

  /* Fields */
  uint64_t   txn_id;                      /*  0: uint64 0 */
  uint64_t   oid;                         /*  1: uint64  */
  int64_t    value;                       /*  2: int64  */
};

#define number_add_request_has_txn_id(msg)  z_bitmap_test((msg)->number_add_request_fields_bitmap, 0)
#define number_add_request_set_txn_id(msg)  z_bitmap_set((msg)->number_add_request_fields_bitmap, 0)
#define number_add_request_has_oid(msg)  z_bitmap_test((msg)->number_add_request_fields_bitmap, 1)
#define number_add_request_set_oid(msg)  z_bitmap_set((msg)->number_add_request_fields_bitmap, 1)
#define number_add_request_has_value(msg)  z_bitmap_test((msg)->number_add_request_fields_bitmap, 2)
#define number_add_request_set_value(msg)  z_bitmap_set((msg)->number_add_request_fields_bitmap, 2)

struct number_add_request *number_add_request_alloc (struct number_add_request *msg);
void   number_add_request_free (struct number_add_request *msg);
int    number_add_request_parse (struct number_add_request *msg, void *reader, uint64_t size);
size_t number_add_request_size  (struct number_add_request *msg);
int    number_add_request_write (struct number_add_request *msg, z_buffer_t *buffer);
void   number_add_request_dump  (FILE *stream, const struct number_add_request *msg);

struct number_add_response {
  /* Internal states */
  uint8_t number_add_response_fields_bitmap[1];
  int number_add_response_ialloc;

  /* Fields */
  struct status status;                      /*  0: status  */
  int64_t    value;                       /*  1: int64  */
};

#define number_add_response_has_status(msg)  z_bitmap_test((msg)->number_add_response_fields_bitmap, 0)
#define number_add_response_set_status(msg)  z_bitmap_set((msg)->number_add_response_fields_bitmap, 0)
#define number_add_response_has_value(msg)  z_bitmap_test((msg)->number_add_response_fields_bitmap, 1)
#define number_add_response_set_value(msg)  z_bitmap_set((msg)->number_add_response_fields_bitmap, 1)

struct number_add_response *number_add_response_alloc (struct number_add_response *msg);
void   number_add_response_free (struct number_add_response *msg);
int    number_add_response_parse (struct number_add_response *msg, void *reader, uint64_t size);
size_t number_add_response_size  (struct number_add_response *msg);
int    number_add_response_write (struct number_add_response *msg, z_buffer_t *buffer);
void   number_add_response_dump  (FILE *stream, const struct number_add_response *msg);

struct number_mul_request {
  /* Internal states */
  uint8_t number_mul_request_fields_bitmap[1];
  int number_mul_request_ialloc;

  /* Fields */
  uint64_t   txn_id;                      /*  0: uint64 0 */
  uint64_t   oid;                         /*  1: uint64  */
  int64_t    value;                       /*  2: int64  */
};

#define number_mul_request_has_txn_id(msg)  z_bitmap_test((msg)->number_mul_request_fields_bitmap, 0)
#define number_mul_request_set_txn_id(msg)  z_bitmap_set((msg)->number_mul_request_fields_bitmap, 0)
#define number_mul_request_has_oid(msg)  z_bitmap_test((msg)->number_mul_request_fields_bitmap, 1)
#define number_mul_request_set_oid(msg)  z_bitmap_set((msg)->number_mul_request_fields_bitmap, 1)
#define number_mul_request_has_value(msg)  z_bitmap_test((msg)->number_mul_request_fields_bitmap, 2)
#define number_mul_request_set_value(msg)  z_bitmap_set((msg)->number_mul_request_fields_bitmap, 2)

struct number_mul_request *number_mul_request_alloc (struct number_mul_request *msg);
void   number_mul_request_free (struct number_mul_request *msg);
int    number_mul_request_parse (struct number_mul_request *msg, void *reader, uint64_t size);
size_t number_mul_request_size  (struct number_mul_request *msg);
int    number_mul_request_write (struct number_mul_request *msg, z_buffer_t *buffer);
void   number_mul_request_dump  (FILE *stream, const struct number_mul_request *msg);

struct number_mul_response {
  /* Internal states */
  uint8_t number_mul_response_fields_bitmap[1];
  int number_mul_response_ialloc;

  /* Fields */
  struct status status;                      /*  0: status  */
  int64_t    value;                       /*  1: int64  */
};

#define number_mul_response_has_status(msg)  z_bitmap_test((msg)->number_mul_response_fields_bitmap, 0)
#define number_mul_response_set_status(msg)  z_bitmap_set((msg)->number_mul_response_fields_bitmap, 0)
#define number_mul_response_has_value(msg)  z_bitmap_test((msg)->number_mul_response_fields_bitmap, 1)
#define number_mul_response_set_value(msg)  z_bitmap_set((msg)->number_mul_response_fields_bitmap, 1)

struct number_mul_response *number_mul_response_alloc (struct number_mul_response *msg);
void   number_mul_response_free (struct number_mul_response *msg);
int    number_mul_response_parse (struct number_mul_response *msg, void *reader, uint64_t size);
size_t number_mul_response_size  (struct number_mul_response *msg);
int    number_mul_response_write (struct number_mul_response *msg, z_buffer_t *buffer);
void   number_mul_response_dump  (FILE *stream, const struct number_mul_response *msg);

struct number_div_request {
  /* Internal states */
  uint8_t number_div_request_fields_bitmap[1];
  int number_div_request_ialloc;

  /* Fields */
  uint64_t   txn_id;                      /*  0: uint64 0 */
  uint64_t   oid;                         /*  1: uint64  */
  int64_t    value;                       /*  2: int64  */
};

#define number_div_request_has_txn_id(msg)  z_bitmap_test((msg)->number_div_request_fields_bitmap, 0)
#define number_div_request_set_txn_id(msg)  z_bitmap_set((msg)->number_div_request_fields_bitmap, 0)
#define number_div_request_has_oid(msg)  z_bitmap_test((msg)->number_div_request_fields_bitmap, 1)
#define number_div_request_set_oid(msg)  z_bitmap_set((msg)->number_div_request_fields_bitmap, 1)
#define number_div_request_has_value(msg)  z_bitmap_test((msg)->number_div_request_fields_bitmap, 2)
#define number_div_request_set_value(msg)  z_bitmap_set((msg)->number_div_request_fields_bitmap, 2)

struct number_div_request *number_div_request_alloc (struct number_div_request *msg);
void   number_div_request_free (struct number_div_request *msg);
int    number_div_request_parse (struct number_div_request *msg, void *reader, uint64_t size);
size_t number_div_request_size  (struct number_div_request *msg);
int    number_div_request_write (struct number_div_request *msg, z_buffer_t *buffer);
void   number_div_request_dump  (FILE *stream, const struct number_div_request *msg);

struct number_div_response {
  /* Internal states */
  uint8_t number_div_response_fields_bitmap[1];
  int number_div_response_ialloc;

  /* Fields */
  struct status status;                      /*  0: status  */
  int64_t    mod;                         /*  1: int64  */
  int64_t    value;                       /*  2: int64  */
};

#define number_div_response_has_status(msg)  z_bitmap_test((msg)->number_div_response_fields_bitmap, 0)
#define number_div_response_set_status(msg)  z_bitmap_set((msg)->number_div_response_fields_bitmap, 0)
#define number_div_response_has_mod(msg)  z_bitmap_test((msg)->number_div_response_fields_bitmap, 1)
#define number_div_response_set_mod(msg)  z_bitmap_set((msg)->number_div_response_fields_bitmap, 1)
#define number_div_response_has_value(msg)  z_bitmap_test((msg)->number_div_response_fields_bitmap, 2)
#define number_div_response_set_value(msg)  z_bitmap_set((msg)->number_div_response_fields_bitmap, 2)

struct number_div_response *number_div_response_alloc (struct number_div_response *msg);
void   number_div_response_free (struct number_div_response *msg);
int    number_div_response_parse (struct number_div_response *msg, void *reader, uint64_t size);
size_t number_div_response_size  (struct number_div_response *msg);
int    number_div_response_write (struct number_div_response *msg, z_buffer_t *buffer);
void   number_div_response_dump  (FILE *stream, const struct number_div_response *msg);

struct sset_insert_request {
  /* Internal states */
  uint8_t sset_insert_request_fields_bitmap[1];
  int sset_insert_request_ialloc;

  /* Fields */
  uint64_t   txn_id;                      /*  0: uint64 0 */
  uint64_t   oid;                         /*  1: uint64  */
  int8_t     allow_update;                /*  2: bool false */
  z_bytes_ref_t key;                         /*  3: bytes  */
  z_bytes_ref_t value;                       /*  4: bytes  */
};

#define sset_insert_request_has_txn_id(msg)  z_bitmap_test((msg)->sset_insert_request_fields_bitmap, 0)
#define sset_insert_request_set_txn_id(msg)  z_bitmap_set((msg)->sset_insert_request_fields_bitmap, 0)
#define sset_insert_request_has_oid(msg)  z_bitmap_test((msg)->sset_insert_request_fields_bitmap, 1)
#define sset_insert_request_set_oid(msg)  z_bitmap_set((msg)->sset_insert_request_fields_bitmap, 1)
#define sset_insert_request_has_allow_update(msg)  z_bitmap_test((msg)->sset_insert_request_fields_bitmap, 2)
#define sset_insert_request_set_allow_update(msg)  z_bitmap_set((msg)->sset_insert_request_fields_bitmap, 2)
#define sset_insert_request_has_key(msg)  z_bitmap_test((msg)->sset_insert_request_fields_bitmap, 3)
#define sset_insert_request_set_key(msg)  z_bitmap_set((msg)->sset_insert_request_fields_bitmap, 3)
#define sset_insert_request_has_value(msg)  z_bitmap_test((msg)->sset_insert_request_fields_bitmap, 4)
#define sset_insert_request_set_value(msg)  z_bitmap_set((msg)->sset_insert_request_fields_bitmap, 4)

struct sset_insert_request *sset_insert_request_alloc (struct sset_insert_request *msg);
void   sset_insert_request_free (struct sset_insert_request *msg);
int    sset_insert_request_parse (struct sset_insert_request *msg, void *reader, uint64_t size);
size_t sset_insert_request_size  (struct sset_insert_request *msg);
int    sset_insert_request_write (struct sset_insert_request *msg, z_buffer_t *buffer);
void   sset_insert_request_dump  (FILE *stream, const struct sset_insert_request *msg);

struct sset_insert_response {
  /* Internal states */
  uint8_t sset_insert_response_fields_bitmap[1];
  int sset_insert_response_ialloc;

  /* Fields */
  struct status status;                      /*  0: status  */
};

#define sset_insert_response_has_status(msg)  z_bitmap_test((msg)->sset_insert_response_fields_bitmap, 0)
#define sset_insert_response_set_status(msg)  z_bitmap_set((msg)->sset_insert_response_fields_bitmap, 0)

struct sset_insert_response *sset_insert_response_alloc (struct sset_insert_response *msg);
void   sset_insert_response_free (struct sset_insert_response *msg);
int    sset_insert_response_parse (struct sset_insert_response *msg, void *reader, uint64_t size);
size_t sset_insert_response_size  (struct sset_insert_response *msg);
int    sset_insert_response_write (struct sset_insert_response *msg, z_buffer_t *buffer);
void   sset_insert_response_dump  (FILE *stream, const struct sset_insert_response *msg);

struct sset_update_request {
  /* Internal states */
  uint8_t sset_update_request_fields_bitmap[1];
  int sset_update_request_ialloc;

  /* Fields */
  uint64_t   txn_id;                      /*  0: uint64 0 */
  uint64_t   oid;                         /*  1: uint64  */
  z_bytes_ref_t key;                         /*  2: bytes  */
  z_bytes_ref_t value;                       /*  3: bytes  */
};

#define sset_update_request_has_txn_id(msg)  z_bitmap_test((msg)->sset_update_request_fields_bitmap, 0)
#define sset_update_request_set_txn_id(msg)  z_bitmap_set((msg)->sset_update_request_fields_bitmap, 0)
#define sset_update_request_has_oid(msg)  z_bitmap_test((msg)->sset_update_request_fields_bitmap, 1)
#define sset_update_request_set_oid(msg)  z_bitmap_set((msg)->sset_update_request_fields_bitmap, 1)
#define sset_update_request_has_key(msg)  z_bitmap_test((msg)->sset_update_request_fields_bitmap, 2)
#define sset_update_request_set_key(msg)  z_bitmap_set((msg)->sset_update_request_fields_bitmap, 2)
#define sset_update_request_has_value(msg)  z_bitmap_test((msg)->sset_update_request_fields_bitmap, 3)
#define sset_update_request_set_value(msg)  z_bitmap_set((msg)->sset_update_request_fields_bitmap, 3)

struct sset_update_request *sset_update_request_alloc (struct sset_update_request *msg);
void   sset_update_request_free (struct sset_update_request *msg);
int    sset_update_request_parse (struct sset_update_request *msg, void *reader, uint64_t size);
size_t sset_update_request_size  (struct sset_update_request *msg);
int    sset_update_request_write (struct sset_update_request *msg, z_buffer_t *buffer);
void   sset_update_request_dump  (FILE *stream, const struct sset_update_request *msg);

struct sset_update_response {
  /* Internal states */
  uint8_t sset_update_response_fields_bitmap[1];
  int sset_update_response_ialloc;

  /* Fields */
  struct status status;                      /*  0: status  */
  z_bytes_ref_t old_value;                   /*  1: bytes  */
};

#define sset_update_response_has_status(msg)  z_bitmap_test((msg)->sset_update_response_fields_bitmap, 0)
#define sset_update_response_set_status(msg)  z_bitmap_set((msg)->sset_update_response_fields_bitmap, 0)
#define sset_update_response_has_old_value(msg)  z_bitmap_test((msg)->sset_update_response_fields_bitmap, 1)
#define sset_update_response_set_old_value(msg)  z_bitmap_set((msg)->sset_update_response_fields_bitmap, 1)

struct sset_update_response *sset_update_response_alloc (struct sset_update_response *msg);
void   sset_update_response_free (struct sset_update_response *msg);
int    sset_update_response_parse (struct sset_update_response *msg, void *reader, uint64_t size);
size_t sset_update_response_size  (struct sset_update_response *msg);
int    sset_update_response_write (struct sset_update_response *msg, z_buffer_t *buffer);
void   sset_update_response_dump  (FILE *stream, const struct sset_update_response *msg);

struct sset_pop_request {
  /* Internal states */
  uint8_t sset_pop_request_fields_bitmap[1];
  int sset_pop_request_ialloc;

  /* Fields */
  uint64_t   txn_id;                      /*  0: uint64 0 */
  uint64_t   oid;                         /*  1: uint64  */
  z_bytes_ref_t key;                         /*  2: bytes  */
};

#define sset_pop_request_has_txn_id(msg)  z_bitmap_test((msg)->sset_pop_request_fields_bitmap, 0)
#define sset_pop_request_set_txn_id(msg)  z_bitmap_set((msg)->sset_pop_request_fields_bitmap, 0)
#define sset_pop_request_has_oid(msg)  z_bitmap_test((msg)->sset_pop_request_fields_bitmap, 1)
#define sset_pop_request_set_oid(msg)  z_bitmap_set((msg)->sset_pop_request_fields_bitmap, 1)
#define sset_pop_request_has_key(msg)  z_bitmap_test((msg)->sset_pop_request_fields_bitmap, 2)
#define sset_pop_request_set_key(msg)  z_bitmap_set((msg)->sset_pop_request_fields_bitmap, 2)

struct sset_pop_request *sset_pop_request_alloc (struct sset_pop_request *msg);
void   sset_pop_request_free (struct sset_pop_request *msg);
int    sset_pop_request_parse (struct sset_pop_request *msg, void *reader, uint64_t size);
size_t sset_pop_request_size  (struct sset_pop_request *msg);
int    sset_pop_request_write (struct sset_pop_request *msg, z_buffer_t *buffer);
void   sset_pop_request_dump  (FILE *stream, const struct sset_pop_request *msg);

struct sset_pop_response {
  /* Internal states */
  uint8_t sset_pop_response_fields_bitmap[1];
  int sset_pop_response_ialloc;

  /* Fields */
  struct status status;                      /*  0: status  */
  z_bytes_ref_t value;                       /*  1: bytes  */
};

#define sset_pop_response_has_status(msg)  z_bitmap_test((msg)->sset_pop_response_fields_bitmap, 0)
#define sset_pop_response_set_status(msg)  z_bitmap_set((msg)->sset_pop_response_fields_bitmap, 0)
#define sset_pop_response_has_value(msg)  z_bitmap_test((msg)->sset_pop_response_fields_bitmap, 1)
#define sset_pop_response_set_value(msg)  z_bitmap_set((msg)->sset_pop_response_fields_bitmap, 1)

struct sset_pop_response *sset_pop_response_alloc (struct sset_pop_response *msg);
void   sset_pop_response_free (struct sset_pop_response *msg);
int    sset_pop_response_parse (struct sset_pop_response *msg, void *reader, uint64_t size);
size_t sset_pop_response_size  (struct sset_pop_response *msg);
int    sset_pop_response_write (struct sset_pop_response *msg, z_buffer_t *buffer);
void   sset_pop_response_dump  (FILE *stream, const struct sset_pop_response *msg);

struct sset_get_request {
  /* Internal states */
  uint8_t sset_get_request_fields_bitmap[1];
  int sset_get_request_ialloc;

  /* Fields */
  uint64_t   txn_id;                      /*  0: uint64 0 */
  uint64_t   oid;                         /*  1: uint64  */
  z_bytes_ref_t key;                         /*  2: bytes  */
};

#define sset_get_request_has_txn_id(msg)  z_bitmap_test((msg)->sset_get_request_fields_bitmap, 0)
#define sset_get_request_set_txn_id(msg)  z_bitmap_set((msg)->sset_get_request_fields_bitmap, 0)
#define sset_get_request_has_oid(msg)  z_bitmap_test((msg)->sset_get_request_fields_bitmap, 1)
#define sset_get_request_set_oid(msg)  z_bitmap_set((msg)->sset_get_request_fields_bitmap, 1)
#define sset_get_request_has_key(msg)  z_bitmap_test((msg)->sset_get_request_fields_bitmap, 2)
#define sset_get_request_set_key(msg)  z_bitmap_set((msg)->sset_get_request_fields_bitmap, 2)

struct sset_get_request *sset_get_request_alloc (struct sset_get_request *msg);
void   sset_get_request_free (struct sset_get_request *msg);
int    sset_get_request_parse (struct sset_get_request *msg, void *reader, uint64_t size);
size_t sset_get_request_size  (struct sset_get_request *msg);
int    sset_get_request_write (struct sset_get_request *msg, z_buffer_t *buffer);
void   sset_get_request_dump  (FILE *stream, const struct sset_get_request *msg);

struct sset_get_response {
  /* Internal states */
  uint8_t sset_get_response_fields_bitmap[1];
  int sset_get_response_ialloc;

  /* Fields */
  struct status status;                      /*  0: status  */
  z_bytes_ref_t value;                       /*  1: bytes  */
};

#define sset_get_response_has_status(msg)  z_bitmap_test((msg)->sset_get_response_fields_bitmap, 0)
#define sset_get_response_set_status(msg)  z_bitmap_set((msg)->sset_get_response_fields_bitmap, 0)
#define sset_get_response_has_value(msg)  z_bitmap_test((msg)->sset_get_response_fields_bitmap, 1)
#define sset_get_response_set_value(msg)  z_bitmap_set((msg)->sset_get_response_fields_bitmap, 1)

struct sset_get_response *sset_get_response_alloc (struct sset_get_response *msg);
void   sset_get_response_free (struct sset_get_response *msg);
int    sset_get_response_parse (struct sset_get_response *msg, void *reader, uint64_t size);
size_t sset_get_response_size  (struct sset_get_response *msg);
int    sset_get_response_write (struct sset_get_response *msg, z_buffer_t *buffer);
void   sset_get_response_dump  (FILE *stream, const struct sset_get_response *msg);

struct sset_scan_request {
  /* Internal states */
  uint8_t sset_scan_request_fields_bitmap[1];
  int sset_scan_request_ialloc;

  /* Fields */
  uint64_t   txn_id;                      /*  0: uint64 0 */
  uint64_t   oid;                         /*  1: uint64  */
  uint32_t   count;                       /*  2: uint32  */
  z_bytes_ref_t key;                         /*  3: bytes  */
  int8_t     include_key;                 /*  4: bool true */
};

#define sset_scan_request_has_txn_id(msg)  z_bitmap_test((msg)->sset_scan_request_fields_bitmap, 0)
#define sset_scan_request_set_txn_id(msg)  z_bitmap_set((msg)->sset_scan_request_fields_bitmap, 0)
#define sset_scan_request_has_oid(msg)  z_bitmap_test((msg)->sset_scan_request_fields_bitmap, 1)
#define sset_scan_request_set_oid(msg)  z_bitmap_set((msg)->sset_scan_request_fields_bitmap, 1)
#define sset_scan_request_has_count(msg)  z_bitmap_test((msg)->sset_scan_request_fields_bitmap, 2)
#define sset_scan_request_set_count(msg)  z_bitmap_set((msg)->sset_scan_request_fields_bitmap, 2)
#define sset_scan_request_has_key(msg)  z_bitmap_test((msg)->sset_scan_request_fields_bitmap, 3)
#define sset_scan_request_set_key(msg)  z_bitmap_set((msg)->sset_scan_request_fields_bitmap, 3)
#define sset_scan_request_has_include_key(msg)  z_bitmap_test((msg)->sset_scan_request_fields_bitmap, 4)
#define sset_scan_request_set_include_key(msg)  z_bitmap_set((msg)->sset_scan_request_fields_bitmap, 4)

struct sset_scan_request *sset_scan_request_alloc (struct sset_scan_request *msg);
void   sset_scan_request_free (struct sset_scan_request *msg);
int    sset_scan_request_parse (struct sset_scan_request *msg, void *reader, uint64_t size);
size_t sset_scan_request_size  (struct sset_scan_request *msg);
int    sset_scan_request_write (struct sset_scan_request *msg, z_buffer_t *buffer);
void   sset_scan_request_dump  (FILE *stream, const struct sset_scan_request *msg);

struct sset_scan_response {
  /* Internal states */
  uint8_t sset_scan_response_fields_bitmap[1];
  int sset_scan_response_ialloc;

  /* Fields */
  struct status status;                      /*  0: status  */
  z_array_t  keys;                        /*  1: list[bytes]  */
  z_array_t  values;                      /*  2: list[bytes]  */
};

#define sset_scan_response_has_status(msg)  z_bitmap_test((msg)->sset_scan_response_fields_bitmap, 0)
#define sset_scan_response_set_status(msg)  z_bitmap_set((msg)->sset_scan_response_fields_bitmap, 0)
#define sset_scan_response_has_keys(msg)  z_bitmap_test((msg)->sset_scan_response_fields_bitmap, 1)
#define sset_scan_response_set_keys(msg)  z_bitmap_set((msg)->sset_scan_response_fields_bitmap, 1)
#define sset_scan_response_has_values(msg)  z_bitmap_test((msg)->sset_scan_response_fields_bitmap, 2)
#define sset_scan_response_set_values(msg)  z_bitmap_set((msg)->sset_scan_response_fields_bitmap, 2)

struct sset_scan_response *sset_scan_response_alloc (struct sset_scan_response *msg);
void   sset_scan_response_free (struct sset_scan_response *msg);
int    sset_scan_response_parse (struct sset_scan_response *msg, void *reader, uint64_t size);
size_t sset_scan_response_size  (struct sset_scan_response *msg);
int    sset_scan_response_write (struct sset_scan_response *msg, z_buffer_t *buffer);
void   sset_scan_response_dump  (FILE *stream, const struct sset_scan_response *msg);

struct flow_append_request {
  /* Internal states */
  uint8_t flow_append_request_fields_bitmap[1];
  int flow_append_request_ialloc;

  /* Fields */
  uint64_t   txn_id;                      /*  0: uint64 0 */
  uint64_t   oid;                         /*  1: uint64  */
  z_bytes_ref_t data;                        /*  2: bytes  */
};

#define flow_append_request_has_txn_id(msg)  z_bitmap_test((msg)->flow_append_request_fields_bitmap, 0)
#define flow_append_request_set_txn_id(msg)  z_bitmap_set((msg)->flow_append_request_fields_bitmap, 0)
#define flow_append_request_has_oid(msg)  z_bitmap_test((msg)->flow_append_request_fields_bitmap, 1)
#define flow_append_request_set_oid(msg)  z_bitmap_set((msg)->flow_append_request_fields_bitmap, 1)
#define flow_append_request_has_data(msg)  z_bitmap_test((msg)->flow_append_request_fields_bitmap, 2)
#define flow_append_request_set_data(msg)  z_bitmap_set((msg)->flow_append_request_fields_bitmap, 2)

struct flow_append_request *flow_append_request_alloc (struct flow_append_request *msg);
void   flow_append_request_free (struct flow_append_request *msg);
int    flow_append_request_parse (struct flow_append_request *msg, void *reader, uint64_t size);
size_t flow_append_request_size  (struct flow_append_request *msg);
int    flow_append_request_write (struct flow_append_request *msg, z_buffer_t *buffer);
void   flow_append_request_dump  (FILE *stream, const struct flow_append_request *msg);

struct flow_append_response {
  /* Internal states */
  uint8_t flow_append_response_fields_bitmap[1];
  int flow_append_response_ialloc;

  /* Fields */
  struct status status;                      /*  0: status  */
  uint64_t   size;                        /*  1: uint64  */
};

#define flow_append_response_has_status(msg)  z_bitmap_test((msg)->flow_append_response_fields_bitmap, 0)
#define flow_append_response_set_status(msg)  z_bitmap_set((msg)->flow_append_response_fields_bitmap, 0)
#define flow_append_response_has_size(msg)  z_bitmap_test((msg)->flow_append_response_fields_bitmap, 1)
#define flow_append_response_set_size(msg)  z_bitmap_set((msg)->flow_append_response_fields_bitmap, 1)

struct flow_append_response *flow_append_response_alloc (struct flow_append_response *msg);
void   flow_append_response_free (struct flow_append_response *msg);
int    flow_append_response_parse (struct flow_append_response *msg, void *reader, uint64_t size);
size_t flow_append_response_size  (struct flow_append_response *msg);
int    flow_append_response_write (struct flow_append_response *msg, z_buffer_t *buffer);
void   flow_append_response_dump  (FILE *stream, const struct flow_append_response *msg);

struct flow_inject_request {
  /* Internal states */
  uint8_t flow_inject_request_fields_bitmap[1];
  int flow_inject_request_ialloc;

  /* Fields */
  uint64_t   txn_id;                      /*  0: uint64 0 */
  uint64_t   oid;                         /*  1: uint64  */
  uint64_t   offset;                      /*  2: uint64  */
  z_bytes_ref_t data;                        /*  3: bytes  */
};

#define flow_inject_request_has_txn_id(msg)  z_bitmap_test((msg)->flow_inject_request_fields_bitmap, 0)
#define flow_inject_request_set_txn_id(msg)  z_bitmap_set((msg)->flow_inject_request_fields_bitmap, 0)
#define flow_inject_request_has_oid(msg)  z_bitmap_test((msg)->flow_inject_request_fields_bitmap, 1)
#define flow_inject_request_set_oid(msg)  z_bitmap_set((msg)->flow_inject_request_fields_bitmap, 1)
#define flow_inject_request_has_offset(msg)  z_bitmap_test((msg)->flow_inject_request_fields_bitmap, 2)
#define flow_inject_request_set_offset(msg)  z_bitmap_set((msg)->flow_inject_request_fields_bitmap, 2)
#define flow_inject_request_has_data(msg)  z_bitmap_test((msg)->flow_inject_request_fields_bitmap, 3)
#define flow_inject_request_set_data(msg)  z_bitmap_set((msg)->flow_inject_request_fields_bitmap, 3)

struct flow_inject_request *flow_inject_request_alloc (struct flow_inject_request *msg);
void   flow_inject_request_free (struct flow_inject_request *msg);
int    flow_inject_request_parse (struct flow_inject_request *msg, void *reader, uint64_t size);
size_t flow_inject_request_size  (struct flow_inject_request *msg);
int    flow_inject_request_write (struct flow_inject_request *msg, z_buffer_t *buffer);
void   flow_inject_request_dump  (FILE *stream, const struct flow_inject_request *msg);

struct flow_inject_response {
  /* Internal states */
  uint8_t flow_inject_response_fields_bitmap[1];
  int flow_inject_response_ialloc;

  /* Fields */
  struct status status;                      /*  0: status  */
  uint64_t   size;                        /*  1: uint64  */
};

#define flow_inject_response_has_status(msg)  z_bitmap_test((msg)->flow_inject_response_fields_bitmap, 0)
#define flow_inject_response_set_status(msg)  z_bitmap_set((msg)->flow_inject_response_fields_bitmap, 0)
#define flow_inject_response_has_size(msg)  z_bitmap_test((msg)->flow_inject_response_fields_bitmap, 1)
#define flow_inject_response_set_size(msg)  z_bitmap_set((msg)->flow_inject_response_fields_bitmap, 1)

struct flow_inject_response *flow_inject_response_alloc (struct flow_inject_response *msg);
void   flow_inject_response_free (struct flow_inject_response *msg);
int    flow_inject_response_parse (struct flow_inject_response *msg, void *reader, uint64_t size);
size_t flow_inject_response_size  (struct flow_inject_response *msg);
int    flow_inject_response_write (struct flow_inject_response *msg, z_buffer_t *buffer);
void   flow_inject_response_dump  (FILE *stream, const struct flow_inject_response *msg);

struct flow_write_request {
  /* Internal states */
  uint8_t flow_write_request_fields_bitmap[1];
  int flow_write_request_ialloc;

  /* Fields */
  uint64_t   txn_id;                      /*  0: uint64 0 */
  uint64_t   oid;                         /*  1: uint64  */
  uint64_t   offset;                      /*  2: uint64  */
  z_bytes_ref_t data;                        /*  3: bytes  */
};

#define flow_write_request_has_txn_id(msg)  z_bitmap_test((msg)->flow_write_request_fields_bitmap, 0)
#define flow_write_request_set_txn_id(msg)  z_bitmap_set((msg)->flow_write_request_fields_bitmap, 0)
#define flow_write_request_has_oid(msg)  z_bitmap_test((msg)->flow_write_request_fields_bitmap, 1)
#define flow_write_request_set_oid(msg)  z_bitmap_set((msg)->flow_write_request_fields_bitmap, 1)
#define flow_write_request_has_offset(msg)  z_bitmap_test((msg)->flow_write_request_fields_bitmap, 2)
#define flow_write_request_set_offset(msg)  z_bitmap_set((msg)->flow_write_request_fields_bitmap, 2)
#define flow_write_request_has_data(msg)  z_bitmap_test((msg)->flow_write_request_fields_bitmap, 3)
#define flow_write_request_set_data(msg)  z_bitmap_set((msg)->flow_write_request_fields_bitmap, 3)

struct flow_write_request *flow_write_request_alloc (struct flow_write_request *msg);
void   flow_write_request_free (struct flow_write_request *msg);
int    flow_write_request_parse (struct flow_write_request *msg, void *reader, uint64_t size);
size_t flow_write_request_size  (struct flow_write_request *msg);
int    flow_write_request_write (struct flow_write_request *msg, z_buffer_t *buffer);
void   flow_write_request_dump  (FILE *stream, const struct flow_write_request *msg);

struct flow_write_response {
  /* Internal states */
  uint8_t flow_write_response_fields_bitmap[1];
  int flow_write_response_ialloc;

  /* Fields */
  struct status status;                      /*  0: status  */
  uint64_t   size;                        /*  1: uint64  */
};

#define flow_write_response_has_status(msg)  z_bitmap_test((msg)->flow_write_response_fields_bitmap, 0)
#define flow_write_response_set_status(msg)  z_bitmap_set((msg)->flow_write_response_fields_bitmap, 0)
#define flow_write_response_has_size(msg)  z_bitmap_test((msg)->flow_write_response_fields_bitmap, 1)
#define flow_write_response_set_size(msg)  z_bitmap_set((msg)->flow_write_response_fields_bitmap, 1)

struct flow_write_response *flow_write_response_alloc (struct flow_write_response *msg);
void   flow_write_response_free (struct flow_write_response *msg);
int    flow_write_response_parse (struct flow_write_response *msg, void *reader, uint64_t size);
size_t flow_write_response_size  (struct flow_write_response *msg);
int    flow_write_response_write (struct flow_write_response *msg, z_buffer_t *buffer);
void   flow_write_response_dump  (FILE *stream, const struct flow_write_response *msg);

struct flow_remove_request {
  /* Internal states */
  uint8_t flow_remove_request_fields_bitmap[1];
  int flow_remove_request_ialloc;

  /* Fields */
  uint64_t   txn_id;                      /*  0: uint64 0 */
  uint64_t   oid;                         /*  1: uint64  */
  uint64_t   offset;                      /*  2: uint64  */
  uint64_t   size;                        /*  3: uint64  */
};

#define flow_remove_request_has_txn_id(msg)  z_bitmap_test((msg)->flow_remove_request_fields_bitmap, 0)
#define flow_remove_request_set_txn_id(msg)  z_bitmap_set((msg)->flow_remove_request_fields_bitmap, 0)
#define flow_remove_request_has_oid(msg)  z_bitmap_test((msg)->flow_remove_request_fields_bitmap, 1)
#define flow_remove_request_set_oid(msg)  z_bitmap_set((msg)->flow_remove_request_fields_bitmap, 1)
#define flow_remove_request_has_offset(msg)  z_bitmap_test((msg)->flow_remove_request_fields_bitmap, 2)
#define flow_remove_request_set_offset(msg)  z_bitmap_set((msg)->flow_remove_request_fields_bitmap, 2)
#define flow_remove_request_has_size(msg)  z_bitmap_test((msg)->flow_remove_request_fields_bitmap, 3)
#define flow_remove_request_set_size(msg)  z_bitmap_set((msg)->flow_remove_request_fields_bitmap, 3)

struct flow_remove_request *flow_remove_request_alloc (struct flow_remove_request *msg);
void   flow_remove_request_free (struct flow_remove_request *msg);
int    flow_remove_request_parse (struct flow_remove_request *msg, void *reader, uint64_t size);
size_t flow_remove_request_size  (struct flow_remove_request *msg);
int    flow_remove_request_write (struct flow_remove_request *msg, z_buffer_t *buffer);
void   flow_remove_request_dump  (FILE *stream, const struct flow_remove_request *msg);

struct flow_remove_response {
  /* Internal states */
  uint8_t flow_remove_response_fields_bitmap[1];
  int flow_remove_response_ialloc;

  /* Fields */
  struct status status;                      /*  0: status  */
  uint64_t   size;                        /*  1: uint64  */
};

#define flow_remove_response_has_status(msg)  z_bitmap_test((msg)->flow_remove_response_fields_bitmap, 0)
#define flow_remove_response_set_status(msg)  z_bitmap_set((msg)->flow_remove_response_fields_bitmap, 0)
#define flow_remove_response_has_size(msg)  z_bitmap_test((msg)->flow_remove_response_fields_bitmap, 1)
#define flow_remove_response_set_size(msg)  z_bitmap_set((msg)->flow_remove_response_fields_bitmap, 1)

struct flow_remove_response *flow_remove_response_alloc (struct flow_remove_response *msg);
void   flow_remove_response_free (struct flow_remove_response *msg);
int    flow_remove_response_parse (struct flow_remove_response *msg, void *reader, uint64_t size);
size_t flow_remove_response_size  (struct flow_remove_response *msg);
int    flow_remove_response_write (struct flow_remove_response *msg, z_buffer_t *buffer);
void   flow_remove_response_dump  (FILE *stream, const struct flow_remove_response *msg);

struct flow_truncate_request {
  /* Internal states */
  uint8_t flow_truncate_request_fields_bitmap[1];
  int flow_truncate_request_ialloc;

  /* Fields */
  uint64_t   txn_id;                      /*  0: uint64 0 */
  uint64_t   oid;                         /*  1: uint64  */
  uint64_t   size;                        /*  2: uint64  */
};

#define flow_truncate_request_has_txn_id(msg)  z_bitmap_test((msg)->flow_truncate_request_fields_bitmap, 0)
#define flow_truncate_request_set_txn_id(msg)  z_bitmap_set((msg)->flow_truncate_request_fields_bitmap, 0)
#define flow_truncate_request_has_oid(msg)  z_bitmap_test((msg)->flow_truncate_request_fields_bitmap, 1)
#define flow_truncate_request_set_oid(msg)  z_bitmap_set((msg)->flow_truncate_request_fields_bitmap, 1)
#define flow_truncate_request_has_size(msg)  z_bitmap_test((msg)->flow_truncate_request_fields_bitmap, 2)
#define flow_truncate_request_set_size(msg)  z_bitmap_set((msg)->flow_truncate_request_fields_bitmap, 2)

struct flow_truncate_request *flow_truncate_request_alloc (struct flow_truncate_request *msg);
void   flow_truncate_request_free (struct flow_truncate_request *msg);
int    flow_truncate_request_parse (struct flow_truncate_request *msg, void *reader, uint64_t size);
size_t flow_truncate_request_size  (struct flow_truncate_request *msg);
int    flow_truncate_request_write (struct flow_truncate_request *msg, z_buffer_t *buffer);
void   flow_truncate_request_dump  (FILE *stream, const struct flow_truncate_request *msg);

struct flow_truncate_response {
  /* Internal states */
  uint8_t flow_truncate_response_fields_bitmap[1];
  int flow_truncate_response_ialloc;

  /* Fields */
  struct status status;                      /*  0: status  */
  uint64_t   size;                        /*  1: uint64  */
};

#define flow_truncate_response_has_status(msg)  z_bitmap_test((msg)->flow_truncate_response_fields_bitmap, 0)
#define flow_truncate_response_set_status(msg)  z_bitmap_set((msg)->flow_truncate_response_fields_bitmap, 0)
#define flow_truncate_response_has_size(msg)  z_bitmap_test((msg)->flow_truncate_response_fields_bitmap, 1)
#define flow_truncate_response_set_size(msg)  z_bitmap_set((msg)->flow_truncate_response_fields_bitmap, 1)

struct flow_truncate_response *flow_truncate_response_alloc (struct flow_truncate_response *msg);
void   flow_truncate_response_free (struct flow_truncate_response *msg);
int    flow_truncate_response_parse (struct flow_truncate_response *msg, void *reader, uint64_t size);
size_t flow_truncate_response_size  (struct flow_truncate_response *msg);
int    flow_truncate_response_write (struct flow_truncate_response *msg, z_buffer_t *buffer);
void   flow_truncate_response_dump  (FILE *stream, const struct flow_truncate_response *msg);

struct flow_read_request {
  /* Internal states */
  uint8_t flow_read_request_fields_bitmap[1];
  int flow_read_request_ialloc;

  /* Fields */
  uint64_t   txn_id;                      /*  0: uint64 0 */
  uint64_t   oid;                         /*  1: uint64  */
  uint64_t   offset;                      /*  2: uint64  */
  uint64_t   size;                        /*  3: uint64  */
};

#define flow_read_request_has_txn_id(msg)  z_bitmap_test((msg)->flow_read_request_fields_bitmap, 0)
#define flow_read_request_set_txn_id(msg)  z_bitmap_set((msg)->flow_read_request_fields_bitmap, 0)
#define flow_read_request_has_oid(msg)  z_bitmap_test((msg)->flow_read_request_fields_bitmap, 1)
#define flow_read_request_set_oid(msg)  z_bitmap_set((msg)->flow_read_request_fields_bitmap, 1)
#define flow_read_request_has_offset(msg)  z_bitmap_test((msg)->flow_read_request_fields_bitmap, 2)
#define flow_read_request_set_offset(msg)  z_bitmap_set((msg)->flow_read_request_fields_bitmap, 2)
#define flow_read_request_has_size(msg)  z_bitmap_test((msg)->flow_read_request_fields_bitmap, 3)
#define flow_read_request_set_size(msg)  z_bitmap_set((msg)->flow_read_request_fields_bitmap, 3)

struct flow_read_request *flow_read_request_alloc (struct flow_read_request *msg);
void   flow_read_request_free (struct flow_read_request *msg);
int    flow_read_request_parse (struct flow_read_request *msg, void *reader, uint64_t size);
size_t flow_read_request_size  (struct flow_read_request *msg);
int    flow_read_request_write (struct flow_read_request *msg, z_buffer_t *buffer);
void   flow_read_request_dump  (FILE *stream, const struct flow_read_request *msg);

struct flow_read_response {
  /* Internal states */
  uint8_t flow_read_response_fields_bitmap[1];
  int flow_read_response_ialloc;

  /* Fields */
  struct status status;                      /*  0: status  */
  z_bytes_ref_t data;                        /*  1: bytes  */
};

#define flow_read_response_has_status(msg)  z_bitmap_test((msg)->flow_read_response_fields_bitmap, 0)
#define flow_read_response_set_status(msg)  z_bitmap_set((msg)->flow_read_response_fields_bitmap, 0)
#define flow_read_response_has_data(msg)  z_bitmap_test((msg)->flow_read_response_fields_bitmap, 1)
#define flow_read_response_set_data(msg)  z_bitmap_set((msg)->flow_read_response_fields_bitmap, 1)

struct flow_read_response *flow_read_response_alloc (struct flow_read_response *msg);
void   flow_read_response_free (struct flow_read_response *msg);
int    flow_read_response_parse (struct flow_read_response *msg, void *reader, uint64_t size);
size_t flow_read_response_size  (struct flow_read_response *msg);
int    flow_read_response_write (struct flow_read_response *msg, z_buffer_t *buffer);
void   flow_read_response_dump  (FILE *stream, const struct flow_read_response *msg);

struct deque_push_request {
  /* Internal states */
  uint8_t deque_push_request_fields_bitmap[1];
  int deque_push_request_ialloc;

  /* Fields */
  uint64_t   txn_id;                      /*  0: uint64 0 */
  uint64_t   oid;                         /*  1: uint64  */
  int8_t     front;                       /*  2: bool false */
  z_bytes_ref_t data;                        /*  3: bytes  */
};

#define deque_push_request_has_txn_id(msg)  z_bitmap_test((msg)->deque_push_request_fields_bitmap, 0)
#define deque_push_request_set_txn_id(msg)  z_bitmap_set((msg)->deque_push_request_fields_bitmap, 0)
#define deque_push_request_has_oid(msg)  z_bitmap_test((msg)->deque_push_request_fields_bitmap, 1)
#define deque_push_request_set_oid(msg)  z_bitmap_set((msg)->deque_push_request_fields_bitmap, 1)
#define deque_push_request_has_front(msg)  z_bitmap_test((msg)->deque_push_request_fields_bitmap, 2)
#define deque_push_request_set_front(msg)  z_bitmap_set((msg)->deque_push_request_fields_bitmap, 2)
#define deque_push_request_has_data(msg)  z_bitmap_test((msg)->deque_push_request_fields_bitmap, 3)
#define deque_push_request_set_data(msg)  z_bitmap_set((msg)->deque_push_request_fields_bitmap, 3)

struct deque_push_request *deque_push_request_alloc (struct deque_push_request *msg);
void   deque_push_request_free (struct deque_push_request *msg);
int    deque_push_request_parse (struct deque_push_request *msg, void *reader, uint64_t size);
size_t deque_push_request_size  (struct deque_push_request *msg);
int    deque_push_request_write (struct deque_push_request *msg, z_buffer_t *buffer);
void   deque_push_request_dump  (FILE *stream, const struct deque_push_request *msg);

struct deque_push_response {
  /* Internal states */
  uint8_t deque_push_response_fields_bitmap[1];
  int deque_push_response_ialloc;

  /* Fields */
  struct status status;                      /*  0: status  */
};

#define deque_push_response_has_status(msg)  z_bitmap_test((msg)->deque_push_response_fields_bitmap, 0)
#define deque_push_response_set_status(msg)  z_bitmap_set((msg)->deque_push_response_fields_bitmap, 0)

struct deque_push_response *deque_push_response_alloc (struct deque_push_response *msg);
void   deque_push_response_free (struct deque_push_response *msg);
int    deque_push_response_parse (struct deque_push_response *msg, void *reader, uint64_t size);
size_t deque_push_response_size  (struct deque_push_response *msg);
int    deque_push_response_write (struct deque_push_response *msg, z_buffer_t *buffer);
void   deque_push_response_dump  (FILE *stream, const struct deque_push_response *msg);

struct deque_pop_request {
  /* Internal states */
  uint8_t deque_pop_request_fields_bitmap[1];
  int deque_pop_request_ialloc;

  /* Fields */
  uint64_t   txn_id;                      /*  0: uint64 0 */
  uint64_t   oid;                         /*  1: uint64  */
  int8_t     front;                       /*  2: bool true */
};

#define deque_pop_request_has_txn_id(msg)  z_bitmap_test((msg)->deque_pop_request_fields_bitmap, 0)
#define deque_pop_request_set_txn_id(msg)  z_bitmap_set((msg)->deque_pop_request_fields_bitmap, 0)
#define deque_pop_request_has_oid(msg)  z_bitmap_test((msg)->deque_pop_request_fields_bitmap, 1)
#define deque_pop_request_set_oid(msg)  z_bitmap_set((msg)->deque_pop_request_fields_bitmap, 1)
#define deque_pop_request_has_front(msg)  z_bitmap_test((msg)->deque_pop_request_fields_bitmap, 2)
#define deque_pop_request_set_front(msg)  z_bitmap_set((msg)->deque_pop_request_fields_bitmap, 2)

struct deque_pop_request *deque_pop_request_alloc (struct deque_pop_request *msg);
void   deque_pop_request_free (struct deque_pop_request *msg);
int    deque_pop_request_parse (struct deque_pop_request *msg, void *reader, uint64_t size);
size_t deque_pop_request_size  (struct deque_pop_request *msg);
int    deque_pop_request_write (struct deque_pop_request *msg, z_buffer_t *buffer);
void   deque_pop_request_dump  (FILE *stream, const struct deque_pop_request *msg);

struct deque_pop_response {
  /* Internal states */
  uint8_t deque_pop_response_fields_bitmap[1];
  int deque_pop_response_ialloc;

  /* Fields */
  struct status status;                      /*  0: status  */
  z_bytes_ref_t data;                        /*  1: bytes  */
};

#define deque_pop_response_has_status(msg)  z_bitmap_test((msg)->deque_pop_response_fields_bitmap, 0)
#define deque_pop_response_set_status(msg)  z_bitmap_set((msg)->deque_pop_response_fields_bitmap, 0)
#define deque_pop_response_has_data(msg)  z_bitmap_test((msg)->deque_pop_response_fields_bitmap, 1)
#define deque_pop_response_set_data(msg)  z_bitmap_set((msg)->deque_pop_response_fields_bitmap, 1)

struct deque_pop_response *deque_pop_response_alloc (struct deque_pop_response *msg);
void   deque_pop_response_free (struct deque_pop_response *msg);
int    deque_pop_response_parse (struct deque_pop_response *msg, void *reader, uint64_t size);
size_t deque_pop_response_size  (struct deque_pop_response *msg);
int    deque_pop_response_write (struct deque_pop_response *msg, z_buffer_t *buffer);
void   deque_pop_response_dump  (FILE *stream, const struct deque_pop_response *msg);

struct server_ping_request {
  /* Internal states */
  uint8_t server_ping_request_fields_bitmap[0];
  int server_ping_request_ialloc;

  /* Fields */

};



struct server_ping_request *server_ping_request_alloc (struct server_ping_request *msg);
void   server_ping_request_free (struct server_ping_request *msg);
int    server_ping_request_parse (struct server_ping_request *msg, void *reader, uint64_t size);
size_t server_ping_request_size  (struct server_ping_request *msg);
int    server_ping_request_write (struct server_ping_request *msg, z_buffer_t *buffer);
void   server_ping_request_dump  (FILE *stream, const struct server_ping_request *msg);

struct server_ping_response {
  /* Internal states */
  uint8_t server_ping_response_fields_bitmap[0];
  int server_ping_response_ialloc;

  /* Fields */

};



struct server_ping_response *server_ping_response_alloc (struct server_ping_response *msg);
void   server_ping_response_free (struct server_ping_response *msg);
int    server_ping_response_parse (struct server_ping_response *msg, void *reader, uint64_t size);
size_t server_ping_response_size  (struct server_ping_response *msg);
int    server_ping_response_write (struct server_ping_response *msg, z_buffer_t *buffer);
void   server_ping_response_dump  (FILE *stream, const struct server_ping_response *msg);

struct server_info_request {
  /* Internal states */
  uint8_t server_info_request_fields_bitmap[0];
  int server_info_request_ialloc;

  /* Fields */

};



struct server_info_request *server_info_request_alloc (struct server_info_request *msg);
void   server_info_request_free (struct server_info_request *msg);
int    server_info_request_parse (struct server_info_request *msg, void *reader, uint64_t size);
size_t server_info_request_size  (struct server_info_request *msg);
int    server_info_request_write (struct server_info_request *msg, z_buffer_t *buffer);
void   server_info_request_dump  (FILE *stream, const struct server_info_request *msg);

struct server_info_response {
  /* Internal states */
  uint8_t server_info_response_fields_bitmap[0];
  int server_info_response_ialloc;

  /* Fields */

};



struct server_info_response *server_info_response_alloc (struct server_info_response *msg);
void   server_info_response_free (struct server_info_response *msg);
int    server_info_response_parse (struct server_info_response *msg, void *reader, uint64_t size);
size_t server_info_response_size  (struct server_info_response *msg);
int    server_info_response_write (struct server_info_response *msg, z_buffer_t *buffer);
void   server_info_response_dump  (FILE *stream, const struct server_info_response *msg);

struct server_quit_request {
  /* Internal states */
  uint8_t server_quit_request_fields_bitmap[0];
  int server_quit_request_ialloc;

  /* Fields */

};



struct server_quit_request *server_quit_request_alloc (struct server_quit_request *msg);
void   server_quit_request_free (struct server_quit_request *msg);
int    server_quit_request_parse (struct server_quit_request *msg, void *reader, uint64_t size);
size_t server_quit_request_size  (struct server_quit_request *msg);
int    server_quit_request_write (struct server_quit_request *msg, z_buffer_t *buffer);
void   server_quit_request_dump  (FILE *stream, const struct server_quit_request *msg);

struct server_quit_response {
  /* Internal states */
  uint8_t server_quit_response_fields_bitmap[0];
  int server_quit_response_ialloc;

  /* Fields */

};



struct server_quit_response *server_quit_response_alloc (struct server_quit_response *msg);
void   server_quit_response_free (struct server_quit_response *msg);
int    server_quit_response_parse (struct server_quit_response *msg, void *reader, uint64_t size);
size_t server_quit_response_size  (struct server_quit_response *msg);
int    server_quit_response_write (struct server_quit_response *msg, z_buffer_t *buffer);
void   server_quit_response_dump  (FILE *stream, const struct server_quit_response *msg);

struct server_debug_request {
  /* Internal states */
  uint8_t server_debug_request_fields_bitmap[1];
  int server_debug_request_ialloc;

  /* Fields */
  uint8_t    log_level;                   /*  1: uint8  */
};

#define server_debug_request_has_log_level(msg)  z_bitmap_test((msg)->server_debug_request_fields_bitmap, 0)
#define server_debug_request_set_log_level(msg)  z_bitmap_set((msg)->server_debug_request_fields_bitmap, 0)

struct server_debug_request *server_debug_request_alloc (struct server_debug_request *msg);
void   server_debug_request_free (struct server_debug_request *msg);
int    server_debug_request_parse (struct server_debug_request *msg, void *reader, uint64_t size);
size_t server_debug_request_size  (struct server_debug_request *msg);
int    server_debug_request_write (struct server_debug_request *msg, z_buffer_t *buffer);
void   server_debug_request_dump  (FILE *stream, const struct server_debug_request *msg);

struct server_debug_response {
  /* Internal states */
  uint8_t server_debug_response_fields_bitmap[0];
  int server_debug_response_ialloc;

  /* Fields */

};



struct server_debug_response *server_debug_response_alloc (struct server_debug_response *msg);
void   server_debug_response_free (struct server_debug_response *msg);
int    server_debug_response_parse (struct server_debug_response *msg, void *reader, uint64_t size);
size_t server_debug_response_size  (struct server_debug_response *msg);
int    server_debug_response_write (struct server_debug_response *msg, z_buffer_t *buffer);
void   server_debug_response_dump  (FILE *stream, const struct server_debug_response *msg);

#endif /* !_RPC_H_ */